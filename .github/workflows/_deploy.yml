name: _Deploy

on:
  workflow_call:
    inputs:
      product:
        description: 'The name of product passed from the caller workflow'
        required: true
        type: string
      project:
        description: 'The project passed from the caller workflow'
        required: true
        type: string
      service-name:
        description: 'The name of service passed from the caller workflow'
        required: true
        type: string
    secrets:
      HEROKU_API_KEY:
        description: 'The heroku api key'
        required: true
      HEROKU_APP_NAME:
        description: 'The heroku app name'
        required: true
      HEROKU_EMAIL:
        description: 'The heroku email'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.13.15 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}
  #deploy:
  #  name: "Deploy"
  #  runs-on: ${{ matrix.os }}
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      os: [ ubuntu-latest ]
  #  permissions:
  #    id-token: write
  #    contents: read
  #  defaults:
  #    run:
  #      shell: bash
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v4
  #    
  #    - name: Configure aws credentials
  #      uses: aws-actions/configure-aws-credentials@v4
  #      with:
  #        role-to-assume: ${{ secrets.AWS_ROLE }}
  #        role-session-name: GitHub_to_AWS_via_FederatedOIDC
  #        aws-region: ${{ secrets.AWS_REGION }}
#
  #    - name: Login to Amazon ECR
  #      id: login-ecr
  #      uses: aws-actions/amazon-ecr-login@v2
  #        
  #    - name: Build, tag, and push image to Amazon ECR
  #      id: build-image
  #      env:
  #        DOCKERFILE_PATH: ${{ inputs.project }}/Dockerfile
  #        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #        ECR_REPOSITORY: ${{ inputs.service-name }}-ecr
  #        IMAGE_TAG: ${{ github.sha }}
  #      run: |
  #        docker build -f ${{env.DOCKERFILE_PATH}} \
  #          --force-rm -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}} .
#
  #        docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}
#
  #    - name: Download task definition
  #      env:
  #        SERVICE_NAME: ${{ inputs.service-name }}
  #      run: |
  #        aws ecs describe-task-definition --task-definition ${{env.SERVICE_NAME}} --query taskDefinition | jq -r 'del(
  #          .taskDefinitionArn,
  #          .requiresAttributes,
  #          .compatibilities,
  #          .revision,
  #          .status,
  #          .registeredAt,
  #          .registeredBy
  #        )' > task-definition.json
  #        ls -la
  #        cat task-definition.json
#
  #    - name: Fill in the new image ID in the Amazon ECS task definition
  #      id: task-def
  #      uses: aws-actions/amazon-ecs-render-task-definition@v1
  #      env:
  #        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #        SERVICE_NAME: ${{ inputs.service-name }}
  #        ECR_REPOSITORY: ${{ inputs.service-name }}-ecr
  #        IMAGE_TAG: ${{ github.sha }}
  #      with:
  #        task-definition: task-definition.json
  #        container-name: ${{env.SERVICE_NAME}}
  #        image: ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}
  #    
  #    - name: Deploy Amazon ECS task definition
  #      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #      env:
  #        SERVICE_NAME: ${{ inputs.service-name }}
  #        CLUSTER_NAME: ${{ inputs.product }}
  #      with:
  #          task-definition: ${{ steps.task-def.outputs.task-definition }}
  #          service: ${{env.SERVICE_NAME}}
  #          cluster: ${{env.CLUSTER_NAME}}
  #          wait-for-service-stability: true