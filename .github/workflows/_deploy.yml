name: _Deploy

on:
  workflow_call:
    inputs:
      project:
        description: 'The *csproj project path passed from the caller workflow'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'The AWS access key id'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'The AWS secret access key'
        required: true
      AWS_REGION:
        description: 'The AWS region'
        required: true
      CONNECTION_STRING:
        description: 'Database connection string'
        required: true
      JWT_TOKEN:
        description: 'The JWT Token for api authentication'
        required: true

jobs:
  Deploy:

    runs-on: ubuntu-latest
    env: 
      working-directory: ./
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      region: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget  

      - name: Install dependencies
        working-directory: ${{ inputs.project }}
        run: dotnet restore
        
      - name: Build
        working-directory: ${{ inputs.project }}
        run: dotnet build --configuration Release --no-restore

      - name: Publish Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: ${{ github.workspace }}/bin/Release/net6.0/publish
      
      - name: Deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CONNECTION_STRING: ${{ secrets.CONNECTION_STRING }}
          JWT_TOKEN: ${{ secrets.JWT_TOKEN }}
          PATH: ${{ github.workspace }}
        run: |
            cd $PATH/bin/Release/net6.0/publish zip -r lambda-package.zip .
            
            aws lambda create-function \
              --function-name expense-control \
              --runtime dotnet6 \
              --role arn:aws:iam::142098356841:role/lambda_exec_expense-control \
              --handler ExpenseControl.API \
              --zip-file fileb://lambda-package.zip \
              --environment Variables="{CONNECTION_STRING=$CONNECTION_STRING, JWT_TOKEN=$JWT_TOKEN}" \
              --region $AWS_REGION